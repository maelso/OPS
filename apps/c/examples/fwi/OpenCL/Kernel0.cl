//
// auto-generated by ops.py
//

#ifdef OCL_FMA
#pragma OPENCL FP_CONTRACT ON
#else
#pragma OPENCL FP_CONTRACT OFF
#endif
#pragma OPENCL EXTENSION cl_khr_fp64:enable

#include "ops_opencl_reduction.h"

#ifndef MIN
#define MIN(a,b) ((a<b) ? (a) : (b))
#endif
#ifndef MAX
#define MAX(a,b) ((a>b) ? (a) : (b))
#endif
#ifndef SIGN
#define SIGN(a,b) ((b<0.0) ? (a*(-1)) : (a))
#endif
#define OPS_READ 0
#define OPS_WRITE 1
#define OPS_RW 2
#define OPS_INC 3
#define OPS_MIN 4
#define OPS_MAX 5
#define ZERO_double 0.0;
#define INFINITY_double INFINITY;
#define ZERO_float 0.0f;
#define INFINITY_float INFINITY;
#define ZERO_int 0;
#define INFINITY_int INFINITY;
#define ZERO_uint 0;
#define INFINITY_uint INFINITY;
#define ZERO_ll 0;
#define INFINITY_ll INFINITY;
#define ZERO_ull 0;
#define INFINITY_ull INFINITY;
#define ZERO_bool 0;

#undef OPS_ACC0
#undef OPS_ACC1
#undef OPS_ACC2
#undef OPS_ACC3
#undef OPS_ACC4


#define OPS_ACC0(x,y) (x+xdim0_Kernel0*(y))
#define OPS_ACC1(x,y) (x+xdim1_Kernel0*(y))
#define OPS_ACC2(x,y) (x+xdim2_Kernel0*(y))
#define OPS_ACC3(x,y) (x+xdim3_Kernel0*(y))
#define OPS_ACC4(x,y) (x+xdim4_Kernel0*(y))


//user function
void Kernel0(const __global float * restrict damp,const __global float * restrict m,const __global float * restrict ut0,
__global float * restrict ut1,const __global float * restrict ut2,
  const float dt)


{
    float r0 = dt * m[OPS_ACC1(0, 0)] + 5.0e-1F * (dt * dt) * damp[OPS_ACC0(0, 0)];
    ut1[OPS_ACC3(0, 0)] = 2.0F * dt * m[OPS_ACC1(0, 0)] * ut0[OPS_ACC2(0, 0)] / r0 -
                          dt * m[OPS_ACC1(0, 0)] * ut2[OPS_ACC4(0, 0)] / r0 +
                          5.0e-1F * (dt * dt) *
                              damp[OPS_ACC0(0, 0)] *
                              ut2[OPS_ACC4(0, 0)] / r0 +
                          (dt * dt * dt) * (
                              1.3333333e-2F * (ut0[OPS_ACC2(-1, 0)] +
                                               ut0[OPS_ACC2(0, -1)] +
                                               ut0[OPS_ACC2(0, 1)] +
                                               ut0[OPS_ACC2(1, 0)]) -
                              8.33333315e-4F * (ut0[OPS_ACC2(-2, 0)] +
                                                ut0[OPS_ACC2(0, -2)] +
                                                ut0[OPS_ACC2(0, 2)] +
                                                ut0[OPS_ACC2(2, 0)]) -
                              4.99999989e-2F * ut0[OPS_ACC2(0, 0)]) / r0;
}


__kernel void ops_Kernel0(
__global const float* restrict arg0,
__global const float* restrict arg1,
__global const float* restrict arg2,
__global float* restrict arg3,
__global const float* restrict arg4,
const float dt,
const int base0,
const int base1,
const int base2,
const int base3,
const int base4,
const int size0,
const int size1 ){


  int idx_y = get_global_id(1);
  int idx_x = get_global_id(0);

  if (idx_x < size0 && idx_y < size1) {
    Kernel0(&arg0[base0 + idx_x * 1*1 + idx_y * 1*1 * xdim0_Kernel0],
                 &arg1[base1 + idx_x * 1*1 + idx_y * 1*1 * xdim1_Kernel0],
                 &arg2[base2 + idx_x * 1*1 + idx_y * 1*1 * xdim2_Kernel0],
                 &arg3[base3 + idx_x * 1*1 + idx_y * 1*1 * xdim3_Kernel0],
                 &arg4[base4 + idx_x * 1*1 + idx_y * 1*1 * xdim4_Kernel0],
                 dt);
  }

}
